def find_highest_percentage_match_sliding_window(hash1, hash2, window_size=100):
    """
    Calculates the highest percentage of matching characters between two hexadecimal
    hashes using a sliding window approach on the longer hash.

    Args:
        hash1 (str): The first hexadecimal hash string.
        hash2 (str): The second hexadecimal hash string.
        window_size (int): The size of the sliding window.

    Returns:
        float: The highest percentage of matching characters found.
    """
    if not hash1 or not hash2:
        return 0.0

    len1 = len(hash1)
    len2 = len(hash2)
    highest_match = 0.0

    if len1 >= len2:
        longer_hash = hash1
        shorter_hash = hash2
        longer_len = len1
        shorter_len = len2
    else:
        longer_hash = hash2
        shorter_hash = hash1
        longer_len = len2
        shorter_len = len1

    for i in range(longer_len - shorter_len + 1):
        window = longer_hash[i : i + shorter_len]
        matches = sum(1 for j in range(shorter_len) if window[j] == shorter_hash[j])
        percentage_match = (matches / shorter_len) * 100.0
        if percentage_match > highest_match:
            highest_match = percentage_match

    return highest_match



if __name__ == "__main__":
  hash1 = "AQADtEoUSYkURRpC8zixHyesHmcRislx5cfxFu-FG_9RL2iO2Lnw59C24wuNHs-LioIv5EGDR0IblbiGXFCPXPpgvbgk5nhu-ENtXEH1D_leXEYXot8D2x5KRkGniNAPD3cueFIPf0erHH0KMZqKE_fx2MO1B34mXCLRaz7aHQ_Ef8OJT7gPnZmK3cc3w12NzC-29UieI8yTDcePL8nRnHmKcOWhHzGPF82P6pLwxULVJBe8F08Nk1ZQ6Reeoz98psgLjdo05M_RXEcfPcFptIqUo9F24sdH1E6FhtKIYz6eHM-ToLwcIcwTfI_QKO_QL4Um4yg7C-N0dNPRPAtC_WgeXMV7PKdSOGbwCfsv3Ah1GqKaKEV-w7nxVnDmI0dCMR-oOKfQjrFwov_R1MFH1IvEo0mz5Phx-Hgq4zlynQJ1inhC9Id4ktCTw2JyzGQMe8eLMHsaXMVZpA-hr8iPpuPRK8ePrheaR0Ke4zl0Bb0s4cPZHJZnTCIf9Dn85XBFC62uBFqO0A4eSeLRPLLQH5WlHM0zSsZ__GjOoqdxvMOTyYj-4kTDMdCuoT-sPMZxYnqiI9ReNMeJX4Oj48tc_PgUNDGDvsfpCz9yJFkcFu8eo6eKiM6gfRVabkOYdMePamMKnx4oJ0afD22ao5lE9bizHM9eHO3ROMXj40eYX2DGZAmqX2i4RHjQODlyxkiPnIczEqFSHvcgcjlyiyjhKkuInphSXUMfpXiiHL5CXEd0ffiPXpiiMsc5lHzgUNWh_TglPAweH7k0tBWcl5h2ghHxYOs39CLqwR96PEd-I3kuojL841Jhqw1-UtiP5uAxaztypmjKQ6uT48fRPAq6H0d7bMchKsd7nJug_9j4CJ5-ocfx4UesRegfwVJoVI-woydBdccdYvrxo-nRHz-R9EcuRY6I_8erHTUHX0dvXDl21BfMHpzDIvmDPMN2F9aNO8FD-EGvo4-E5rJw5cM3outkNEf-oicHj9ARThn-o-JoNBHyZR7-w-qET4R-lPngoWfwbMDzEH0uXDvCJzu6kIF_XDouoV3w4w7R5EepEpeEcLmO14L2IH-M_phC6TgZnMfn42EQZtShdQwuBT9U5zjRRNSMaoTeIh2Jo8m4o0fJw_IzlEuP5tRRMGWSw44UpEc3p9DzBWEPr0uOHz9OBtRxLcfRmHiC-ReS6daQcsdznHgPhD9-_MiPN_nRKD_a5fjRF9aUGqk6QZR4lPiJJvyCnj3kZMTlwdfy4jl0tBcatcOz4fiH_vhyaGPwEF2WczgTuPbwZWHw4WKOrRp-pJkSJegvdCG2L0H4SC9-aD82cjl6Hsf1BN83iMrxREHXo5Rwfvh2NAoZlFyQ5zA1Eg9D_EP_HGeWEidMdKFO9Ao8NocRTs-E69D0I8x-_PgP9qHQHJ247fiH9mjG4UKG5PuxfbiOZzdeovngoz9-BT8akuiDo0kT5sgFR0sPkQsq4aFRGc2n4wmPXvB49Ax-nBea72hpfCnxH6qPBw--HKGPXMEZDU4joc0U4wvR_AjRKcqCxpGOu-gR5ouh3zgi5UHP4zhxBmHIHT1DdJHRHzdKKUdz4mGKPkGyhMajBJ-EE42TpcM3qqByoza6CQ2X48ePH2GcvKieol-M44MO89B-VBe01ClBV0asY4r2oB_ezcfxWAyO67ikI9-MxM1cWMeHjoezFVd0uD9ONF-RTye0PBzCSyfe5EP3D94SJSOq7ZjFozccF31GHL-RF1cOXUcfBY7GwE8UHVPjo4ey4zxcBf9hMYlSqB6izcdUJcd5nEJlhkOzfsVHPDqSh0f4oFHInDiHEnlm6JSCXIvRRDwu4YFNHY82lL_gTLDSURkY0SnQ9Oh1nFlQ7cje4iUHqxn0MRAfXIXJ5SiaD1Weo2TQnNAT5Yj0oxk-akfl0Phl_IUfXDvCqBF7nMcvVEfzoN6h5TQeHmGOs4VzfPME1zlCkmLx6IKWaP3QSclynOsQ2gaaFx9xScilY9eFBzIZPKrRORPuHD5OQj9-w9ZwvIkiZXC0LCv0CWHGHD9-9BcaHneWFc_waUfyHOkz4UFzRzgTCX6E_mhO9BqSvUaYDy9RfoeTHyZno-JLXD6a8UefHa0T_OijIS-PRs1YaA-0kPjhZ0Hvo5EYofqRM0h_6EX4HM2OH2WWKDn8WIBzNOfwCD_yF32IKedxQhMfo9mFv3iCa0duXBqarMK0E-fBHK5qTKfwovCkD_3x_Eh-CbGYozl-eBpxO8N3bD_6gdVlXEN0SUH3HFr4HNdRHo1M4x8w9ceD53jgHz_evdj44J0u9MFxIReu7UPNHI104g92MCfhjsb0U_jxozl65_iRVJKO3ImT4P1wonmGsjrxY1Zz9CdM8EKsJQwH_Ua0T7B0_MeD9zDH4NHRPHhi45Hw3WjUHT1RHn66ITf0KESJO0etoxmPLzv-F81FdE1mnDRaNKOEL_jxH-ehPRfe40sWpCeeHX5gRUa7pCKeE0-G5h5KaRlaJcd8IVxdDYceHeX0jAhDnMxxEy9z5JnQ7IHWKMN59OgzdOHha0Y4cUcfNM_xRAmPdhd8eKQIYhAkylFEBGNOIEWQQEQIZQQTgDGlECEECEYgBEA4QYiiwAghnCICGSQQA4IJoJwDEhCggWACAKSFAUAgaIFwghFLBWCCGIAIAEAIAARgRpzJhCLCGACIZwgYBRBgwjhDBDGIMcYcQAwIYIAT2jDFKEBMEQMcAIYRg4hThAHEkBGSMGQJGEQIJJwQhgCABBCAGCAUFQowDZARjAigtFNAITAEIAQxIYaAhggKFAECCIFMYUhAgwygQAFGAENIGKIIAQIgJAxVhhCimHJAIKOA0pBJYxBBgCAAAaIGGMEUFwRgqCihAACilBBSOyQQgWIYpQTRhADGhBICEACQQNZBL5BRChCgEAEYKAGEMAQRCQgRziHEBBNMGGEAAUYJQgQwwAjDiBAWKEKNUAwRCRQDYjFLBEAIIQAQ0sA4sBxkxhgmILeAAQeYpEIIAYSSQgAADCEQAGYwYxICYYxhgBgGDBECCQCIE4QJxgVwRDBsiDDKCMYAAoQhQgAjQBHgJABGIAEEgEoACiRBwgGChCVOEKAAA0BYgQizxBDABDCGKYOgYQ4gw5QwyABGXGWKEAMMUIIJFKTjBBgoDCHoSQAUMIwAQAhVFihikEMCGEOEUwIAQpAhSiAFACJEEQAE0QQBQwwkBhEjiENCGAUAY0w4RbRwxDghABVCAICAQIYIIAgSEADlhEEGMKEcRY4JwQhwBAAjmAFMG8IIAUIQZAkRhgMACTKIIQYcAExQgggBgAAjBAFcAaAoAAIYIABDwkhmiBFAGKCQAswg4gBVyBEIEFCOCcAAIY5IChRSChChhBBAMKOIAYIKYQUEiAhFBHTUAGMQgGIAQASymhDmHFAICOCsEoIAKRgwzinFgGUKCEMgEEIQbIwgwCDiGBAAECOMUQQoAQRiiACrgCAMCaQEYVYwAIQRTCgQ"
  hash2 = "AQADtFGiJWkUTQlC6_gR5jn-QuwZhFQcB3dA74OPM0sRi9KhmwjD46EsUeA-FueW49sVtGmFkEyERg-UH2koKcebqBqu5UFzlujxHBEd_IEOtsMVHh-u42KD8FXRPPhyZHuOM5UiXM8TKN9xKQrSGfHO4slSI29ktLswZTuO5ofrVGCOK8ujocuRLCeJfAE5Hc_xB1PmICFj5Dka58W3sMLLww6N-AmS62ipI7kyKshP4oc98bh9_I1wJCeie8QkusZTVQmqo7mEZzmuI7lKhNQeNFeCBz-efGhymNlS9EFyBSH8HJW3JRhzpTiaM0OfHdeIdk_gHnN3lMtRH2n2QyMZrM3RMwHjyFOg0hmeI9RrOHmQ4-KhUUH0Y2ayF18sMFnColwyBGKVHb8RPmAiBz_yHA2jQApZEeEfNO_xgfxRL3Bc9PipCGMUXcanw-FV_Liu4pG25XC54g9-4vmxdUOy_EHo4ztTMNseMD2u4xIaS_NRS2iO8NOhOnTQjCyyaCOaSeHQRxbqHc1K5PPwhMkaDafoQnuHZnlwxktw0ejR5IG0XHjEw8se_MJ19EkeNA_448nQrA96GjsHH_mJE5WmHA3dCe-Jy7AaHbNcoQs7JPqMsNg_oY-ewNfx4iL8GxHXFTd0OGYyBlnGZMe342geZ0GWJw4u7tCPXg8cEa0rofRhTQcf_A7hRUElrEyO5gkRnh--oxmLMmPwPMcP98d1bPqDXCZUF3m4HOeHLw6azwd3PEedZFknHL-Q50iuRcQX4FLwFtXxOsN7JBL_IFxwkGWa4zVqZUezHp90_EdPWD2mKxbxHbG6D0mO6ygPJn5wuA6eSMc9_EiqECHZsngO98iPB9p9PDl4v_gjRdAW3ggThZw07Hlw-MRxPMKjrMh19IGWP_j2Qs1xXJOL9ket4yqmp2gOHf-KbUuIazl-_B9-QfyISzeeKIcmMResMhfUb0F-wU30FH3wMPCH58iTPNC-RWh-vNDTEPmFK0vSCY1GWah6PDp-eD-O5Eb4GI1T4dNxP8YTXdhPBlP2PEh25FIPX8Euws8BMydyKkbl6ghznMfqSMaP62hW9vgO33jxNjAblKKg88Md_NjyMnhGccrQJGGWo0cPX0GeZEiWHjuefbjWNEOYqjl6yMi7vFiY3MPphNie4Qm-iil6Fmk9aCdySTr6CM38BU-iF0dakYP6IpdwFdfRRDyqJNGD1wgPLSfy8GiOWk9wW2gyXEHeTvjxvzh-IC984umHf8RZdDmO_UoKPsd3Y0czZjmaJV-QC2KQKyNWL_gDxrywbdmJnDISkjwOHzXePah3_Dg04oxwC3v0BFxOXMVD4QV1XD--BbuO_ziPJlqkGPmNZH3w40e9PWgeHD_qbEXzPTiukMj1QCeP6MywaL3w4zwsR8YZ7C_CJpCS48EPLs5R8SLSJjt6_FlwDM_iw1FynHKC17h19MlyHFpGXrhIfEqP9YGj6TBbXEzwLMeOHNqfo4kfCU-OnMlHPMHD47rwNE6EN1fxHwmX42Uj5BfRNMnR6ziOV0cuG5rTI8yOHztzXGJw6cN5InzyJGj6CjqObzma76gxZX9Q9VgrVA_COF2OXMEDnXRwhYwQ3iua-sTTHLc-PE_RHL7g-ngLJmaOS3nxTThKkhuOdVzhMBqLfriOXwvxMQ7-I3d66N-IMDl-4k2e4UKfBOW-EcnyD_mLX0OVrInQPNtx4w_8nHitwO9w7YSTp-lwkQ2SZwjLZcf54mRR3nj-Y9KSKYcnJh3C_IGOoJdjNM4O7pHxEN_hncOsNGhjB03EREYOLaqUh6ikI__xpQ1-okdzIRf34ImyQzve0EF_9IJFRke97PgPfdwSeAwnHFeOr0ctVRkUxT6aKiiD68ePfXC3Ds-DOZyh80Gvo1nGjME8eXgf9GiuQZVMYxf0kgruQ7sNqie8w2eHXsd7qKeNPB1Oo3EeVPJRTjqacsAWI2e"
  print(find_highest_percentage_match_sliding_window(hash1, hash2, 150))